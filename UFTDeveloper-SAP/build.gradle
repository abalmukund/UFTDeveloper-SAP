/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.87")
        //[sonarqube] Needed for "sonarqube" task.
        //classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8.0.1969"
        classpath "net.serenity-bdd:serenity-emailer:2.0.87"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
//[serenitybdd] Required for "aggregate" task. Needed for reports generation.
apply plugin: 'net.serenity-bdd.aggregator'
//[sonarqube] Needed for "sonarqube" task.
//apply plugin: 'org.sonarqube'

group = 'serenitybdd-seed'
version = '4.0.6'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}*/

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

dependencies {
	//[serenitybdd] Serenity BDD dependencies.
    compile fileTree(dir: 'libs', include: '*.jar')
    
    // https://mvnrepository.com/artifact/com.jayway.jsonpath/json-path
	compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
	
    compile group: 'net.serenity-bdd', name: 'serenity-cucumber', version:'1.9.39'
    // testCompile 'net.serenity-bdd:serenity-core:2.0.11'
    testCompile 'net.serenity-bdd:serenity-junit:2.0.11'
    testCompile('org.assertj:assertj-core:1.7.0')
    testCompile('org.slf4j:slf4j-simple:1.7.21')
    testCompile('org.apache.poi:poi:4.1.2')
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
     
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

serenity {
    reports = ["email"]
}

//[sonarqube] To avoid test task dependency
//tasks.sonarqube.dependsOn = []

//[sonarqube] Sonarqube required properties.
/*sonarqube {
    properties {
        property "sonar.projectName", "UFTDeveloper_SAP"
        property "sonar.projectKey", "projectkey"
        property "sonar.host.url", "sonarqube_URL"
        property "sonar.login", "LOGIN_Key"
        property "sonar.language", "java"
        property "sonar.profile", "PROFILE_NAME"
        property "sonar.report.export.path", "sonar-report.json"
        property "sonar.sources", "src"
        property "sonar.exclusions", "src/test/resources"
        property "sonar.test.inclusions", "src/test/java"
        property "sonar.java.binaries", "build"
       property "sonar.coverage.exclusions", "** /*"
    }
}*/

// Allow build to continue on test failure
gradle.startParameter.continueOnFailure = true

test{
    systemProperty 'properties', 'serenity.properties'

    /* Show Serenity execution details: */
    test.testLogging.showStandardStreams = true
    /* Configuring Serenity reporting: */
    test.reports.getHtml().enabled = false
    test.reports.junitXml.enabled= false
    /* Setting the desired Test Runner for the task: */
   // include '/TestRunner.class'
}

test.reports.getHtml().enabled = false
test.reports.junitXml.enabled= false